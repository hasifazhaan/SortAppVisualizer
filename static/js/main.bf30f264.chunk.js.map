{"version":3,"sources":["files/Additional.jsx","files/Sortalgo.js","files/CreateElements.jsx","files/Elements.jsx","files/Sortapp.jsx","App.js","index.js"],"names":["Additional","Component","state","showColorBtn","selected_color","this","props","color","ShowColor","setState","colorChosen","ColorValue","alert","console","log","Changestate","OpenAnalysis","render","id","onMouseOver","onClick","className","rdm","window","location","reload","animation","color_animation","quickSortAlgo","arr","length","items","slice","swap","leftIndex","rightIndex","temp","quickSort","left","right","index","mid","Math","floor","pivot","i","j","Array","fill","push","partition","MergeSort","unsortedarray","mergeSort","l","r","m","parseInt","n1","n2","L","R","k","merge","selectedIs","timer","children","avg","top","min","width","CreateElements","constructor","super","SortAlgo","sort","date1","Date","sorted_arrs","setInterval","fcn","clearInterval","stopOrResumeAllBtn","date2","time","IsPalying","status","Total_Array","Array_Per_Sec","toFixed","speed","SubmitValue","name","Axios","post","SortName","Speed","len","array","then","getData","Algo","getFromBackend","address","heading","get","params","sortname","response","makeElem","data","ChoseWhichSort","algo_name","e","Start","Bubblesort","n","key","insertion","Insertionsort","xp","yp","min_idx","selection","SelectionSort","getNextGap","gap","swapped","CombSort","gnomeSort","GnomeSort","heapify","largest","HeapSort","IsPlaying","Algo_Name","Bool","parent","getChildBtn","current","child","disabled","StopPlayingAlgorithm","SetSpeed","target","value","advance","getwidth","document","body","clientWidth","Analysistool","React","createRef","stat","ref","algo_running","onChange","map","val","changable","style","height","backgroundColor","average","max","Elements","start","num","startsort","HandelesNoOfElem","myRef","isNaN","getvalues","newelem","number","storevalue","prevState","generaterandom","random","changeState","val1","val2","HandlesKey","HandlesKeyElem","bind","componentDidMount","type","onKeyDown","Sortapp","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bf30f264.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { rdm } from \"./Elements\";\nimport { Changestate } from \"./CreateElements\";\nimport \"./Styling_files/CreateElements.css\";\nimport \"./Styling_files/Additional.css\"\n\nexport default class Additional extends Component {\n  state = {\n    showColorBtn: false,\n    selected_color: this.props.color,\n  };\n  ShowColor = () => {\n    this.setState({ showColorBtn: !this.state.showColorBtn });\n  };\n\n  colorChosen = (color) => {\n    let ColorValue;\n    switch (color) {\n      case \"Navy\":\n        ColorValue = \"#6E85B2\";\n        break;\n      case \"Blue\":\n        ColorValue = \"rgb(65, 183, 250)\";\n        break;\n      case \"Beige\":\n        ColorValue = \"#F2E1C1\";\n        break;\n      case \"Peach\":\n        ColorValue = \"#F6AE99\";\n        break;\n      case \"Yellow\":\n        ColorValue = \"#EEB76B\";\n        break;\n      case \"Orange\":\n        ColorValue = \"#E2703A\";\n        break;\n      default:\n        alert(\"moo\");\n    }\n    this.setState({ selected_color: ColorValue });\n    console.log(color);\n    alert(\"Color Changed Sucessfully.\");\n    Changestate(\"Color\", this.state.selected_color);\n    this.ShowColor();\n  };\n  OpenAnalysis = () => {\n    Changestate(\"Ana\", true);\n  };\n  render() {\n    return (\n      <div>\n          <div id=\"Color-Heading\">\n              Color\n         \n        <div id=\"ColorParent\" onMouseOver={this.ShowColor}>\n           <button onClick={() => this.colorChosen(\"Navy\")}>Navy</button>\n              <button onClick={() => this.colorChosen(\"Beige\")}>Beige</button>\n              <button onClick={() => this.colorChosen(\"Blue\")}>Blue</button>\n              <button onClick={() => this.colorChosen(\"Orange\")}>Orange</button>\n              <button onClick={() => this.colorChosen(\"Yellow\")}>Yellow</button>\n              <button onClick={() => this.colorChosen(\"Peach\")}>Peach</button>\n       \n        </div> \n        </div>\n\n       \n\n        <button className=\"Additional-Element-parent\" onClick={() => rdm()}>\n          Mix Array\n        </button>\n        <button onClick={this.OpenAnalysis}>Open Analysis Tool</button>\n        <button onClick={()=> window.location.reload()}>Back</button>\n      </div>\n    );\n  }\n}\n","let animation = [];\nlet color_animation = [];\n\n// Bubble Sort\n//\nexport const Bubblesort = (arr) => {\n  animation.length = 0;\n  color_animation.length = 0;\n  let unsortedarray = arr.slice();\n\n  for (var i = 0; i < arr.length; i++) {\n    // Last i elements are already in place\n    for (var j = 0; j < unsortedarray.length - i - 1; j++) {\n      let color = Array(unsortedarray.length).fill(\"n\");\n      // Checking if the item at present iteration\n      // is greater than the next iteration\n      color[j+1] = 'g';\n      if (unsortedarray[j] > unsortedarray[j + 1]) {\n        // If the condition is true then swap them\n\n        var temp = unsortedarray[j];\n        unsortedarray[j] = unsortedarray[j + 1];\n        unsortedarray[j + 1] = temp;\n        color[j] = \"r\";\n      }\n      color_animation.push(color);\n      animation.push(unsortedarray.slice());\n    }\n  }\n  // returning the sorted array with color animation\n  return { animation, color_animation };\n};\n//\n//\n// Insertion sort\n//\nexport const Insertionsort = (arr) => {\n  animation.length = 0;\n  color_animation.length = 0;\n  let unsortedarray = arr.slice();\n\n  function insertion(arr, n) {\n    let i, key, j;\n    for (i = 1; i < n; i++) {\n      key = arr[i];\n      j = i - 1;\n\n\n      /* Move elements of arr[0..i-1], that are  \n        greater than key, to one position ahead  \n        of their current position */\n      while (j >= 0 && arr[j] > key) {\n        let color = Array(unsortedarray.length).fill(\"n\");\n        arr[j + 1] = arr[j];\n        j = j - 1;\n        color[i] = 'g'\n        color[j] = \"r\";\n        color[j + 1] = \"r\";\n        color_animation.push(color);\n        animation.push(arr.slice());\n      }\n      arr[j + 1] = key;\n    }\n  }\n  insertion(unsortedarray, unsortedarray.length);\n  return { animation, color_animation };\n};\n\n//\n//\n//\n//QuickSort\nexport const quickSortAlgo = (arr) => {\n  animation.length = 0;\n  color_animation.length = 0;\n  let items = arr.slice();\n  function swap(items, leftIndex, rightIndex) {\n   \n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n    \n  }\n  function partition(items, left, right) {\n    var mid  = Math.floor((right + left) / 2)\n    var pivot = items[mid], //middle element\n      i = left, //left pointer\n      j = right; //right pointer\n    while (i <= j) {\n      let color = Array(items.length).fill(\"n\");\n      while (items[i] < pivot) {\n        i++;\n      }\n      while (items[j] > pivot) {\n        j--;\n      }\n      color[mid] = 'g';\n      if (i <= j) {\n        swap(items, i, j); //sawpping two elements\n        color[i] = \"r\";\n        color[j] = \"r\";\n        color_animation.push(color.slice());\n        animation.push(items.slice());\n        i++;\n        j--;\n      }\n    }\n    return i;\n  }\n\n  function quickSort(items, left, right) {\n    var index;\n    if (items.length > 1) {\n      index = partition(items, left, right); //index returned from partition\n      if (left < index - 1) {\n        //more elements on the left side of the pivot\n        quickSort(items, left, index - 1);\n      }\n      if (index < right) {\n        //more elements on the right side of the pivot\n        quickSort(items, index, right);\n      }\n    }\n    return items;\n  }\n  quickSort(items, 0, items.length - 1);\n  return { animation, color_animation };\n};\n\n//\n//\n//\n//Selection Sort\nexport const SelectionSort = (arr) => {\n  animation.length = 0;\n  color_animation.length = 0;\n  let unsortedarray = arr.slice();\n  function swap(arr, xp, yp) {\n    var temp = arr[xp];\n    arr[xp] = arr[yp];\n    arr[yp] = temp;\n\n  }\n\n  function selection(arr, n) {\n    var i, j, min_idx;\n\n    // One by one move boundary of unsorted subarray\n    for (i = 0; i < n - 1; i++) {\n      // Find the minimum element in unsorted array\n      min_idx = i;\n      for (j = i + 1; j < n; j++) {\n        let color = Array(unsortedarray.length).fill(\"n\");\n        if (arr[j] < arr[min_idx]) \n          min_idx = j;\n        color[j] = \"g\";\n        color[min_idx] = \"r\";\n        color[i] = 'r';\n        color_animation.push(color.slice());\n        animation.push(unsortedarray.slice());\n      }\n\n      // Swap the found minimum element with the first element\n      swap(arr, min_idx, i);\n    }\n  }\n  selection(unsortedarray, unsortedarray.length);\n  return { animation, color_animation };\n};\n\n//\n//\n//\n// Comb sort\nexport const CombSort = (arr) => {\n  let unsortedarray = arr.slice();\n  animation.length = 0;\n  color_animation.length = 0;\n\n  function getNextGap(gap) {\n    // Shrink gap by Shrink factor\n    gap = parseInt((gap * 10) / 13, 10);\n    if (gap < 1) return 1;\n    return gap;\n  }\n\n  // Function to sort arr[] using Comb Sort\n  function sort(arr) {\n    let n = arr.length;\n\n    // initialize gap\n    let gap = n;\n\n    // Initialize swapped as true to\n    // make sure that loop runs\n    let swapped = true;\n\n    // Keep running while gap is more than\n    // 1 and last iteration caused a swap\n    while (gap !== 1 || swapped === true) {\n      // Find next gap\n      gap = getNextGap(gap);\n\n      // Initialize swapped as false so that we can\n      // check if swap happened or not\n      swapped = false;\n\n      // Compare all elements with current gap\n      for (let i = 0; i < n - gap; i++) {\n        let color = Array(unsortedarray.length).fill(\"n\");\n        color[i] = 'g';\n        if (arr[i] > arr[i + gap]) {\n          // Swap arr[i] and arr[i+gap]\n          let temp = arr[i];\n          arr[i] = arr[i + gap];\n          arr[i + gap] = temp;\n          color[i] = \"r\";\n          color[i + gap] = \"r\";\n\n          // Set swapped\n          swapped = true;\n        }\n        color_animation.push(color);\n        animation.push(unsortedarray.slice());\n      }\n    }\n  }\n  sort(unsortedarray);\n  return { animation, color_animation };\n};\n\n//\n//\n//\n//Gnome Sort\nexport const GnomeSort = (arr) => {\n  let unsortedarray = arr.slice();\n  animation.length = 0;\n  color_animation.length = 0;\n\n  function gnomeSort(arr, n) {\n    let index = 0;\n\n    while (index < n) {\n      let color = Array(unsortedarray.length).fill(\"n\");\n      if (index === 0) index++;\n      if (arr[index] >= arr[index - 1]) index++;\n      else {\n        let temp = 0;\n        temp = arr[index];\n        arr[index] = arr[index - 1];\n        arr[index - 1] = temp;\n        index--;\n        color[index] = \"r\";\n        color[index - 1] = \"r\";\n      }\n      color_animation.push(color);\n      animation.push(arr.slice());\n    }\n    return;\n  }\n  gnomeSort(unsortedarray, unsortedarray.length);\n  return { animation, color_animation };\n};\n\n//\n//\n//\n// Heap Sort\n\nexport const HeapSort = (arr) => {\n  let unsortedarray = arr.slice();\n  animation.length = 0;\n  color_animation.length = 0;\n\n  function sort(arr) {\n    let color = Array(unsortedarray.length).fill(\"n\");\n    var n = arr.length;\n\n    // Build heap (rearrange array)\n    for (var i = Math.floor(n / 2) - 1; i >= 0; i--) heapify(arr, n, i);\n\n    // One by one extract an element from heap\n    for (i = n - 1; i > 0; i--) {\n      // Move current root to end\n\n      var temp = arr[0];\n      arr[0] = arr[i];\n      arr[i] = temp;\n      // call max heapify on the reduced heap\n      heapify(arr, i, 0);\n    }\n    animation.push(arr.slice());\n    color_animation.push(color.slice());\n  }\n\n  // To heapify a subtree rooted with node i which is\n  // an index in arr[]. n is size of heap\n  function heapify(arr, n, i) {\n    let color = Array(unsortedarray.length).fill(\"n\");\n\n    var largest = i; // Initialize largest as root\n    var l = 2 * i + 1; // left = 2*i + 1\n    var r = 2 * i + 2; // right = 2*i + 2\n\n    // If left child is larger than root\n    if (l < n && arr[l] > arr[largest]) largest = l;\n\n    // If right child is larger than largest so far\n    if (r < n && arr[r] > arr[largest]) largest = r;\n\n    // If largest is not root\n    if (largest !== i) {\n      var swap = arr[i];\n      arr[i] = arr[largest];\n      arr[largest] = swap;\n      color[i] = \"r\";\n      color[largest] = \"r\";\n      animation.push(arr.slice());\n      color_animation.push(color.slice());\n      // Recursively heapify the affected sub-tree\n      heapify(arr, n, largest);\n    }\n  }\n  sort(unsortedarray);\n  return { animation, color_animation };\n};\n\n//\n//\n//\n// Merge Sort\nexport const MergeSort = (arr) => {\n  let unsortedarray = arr.slice();\n  animation.length = 0;\n  color_animation.length = 0;\n\n  function merge(arr, l, m, r) {\n    var n1 = m - l + 1;\n    var n2 = r - m;\n\n    // Create temp arrays\n    var L = new Array(n1);\n    var R = new Array(n2);\n\n    // Copy data to temp arrays L[] and R[]\n    for (var i = 0; i < n1; i++) L[i] = arr[l + i];\n    for (var j = 0; j < n2; j++) R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r]\n\n    // Initial index of first subarray\n    i = 0;\n\n    // Initial index of second subarray\n    j = 0;\n\n    // Initial index of merged subarray\n    var k = l;\n\n    while (i < n1 && j < n2) {\n      let color = Array(unsortedarray.length).fill(\"n\");\n      color[k] = 'g';\n      \n      if (L[i] <= R[j]) {\n        arr[k] = L[i];\n        color[k+i] = \"r\";\n        i++;\n      } else {\n        arr[k] = R[j];\n       color[m + 1 +j] = \"r\";\n        j++;\n      }\n      color_animation.push(color);\n      animation.push(arr.slice());\n      k++;\n    }\n\n    // Copy the remaining elements of\n    // L[], if there are any\n    while (i < n1) {\n      let color = Array(unsortedarray.length).fill(\"n\");\n      arr[k] = L[i];\n      color[k] = 'g';\n      color[l+i] = \"r\";\n      color_animation.push(color);\n      animation.push(arr.slice());\n      i++;\n      k++;\n    }\n\n    // Copy the remaining elements of\n    // R[], if there are any\n    while (j < n2) {\n      let color = Array(unsortedarray.length).fill(\"n\");\n      arr[k] = R[j];\n      color[k] = \"g\";\n      color[m + 1 +j] = 'r';\n      color_animation.push(color);\n      animation.push(arr.slice());\n      j++;\n      k++;\n    }\n  }\n\n    \n  // l is for left index and r is\n  // right index of the sub-array\n  // of arr to be sorted */\n\n\n\n  function mergeSort(arr, l, r) {\n    if (l >= r) {\n      return; //returns recursively\n    }\n    var m = l + parseInt((r - l) / 2);\n    mergeSort(arr, l, m);\n    mergeSort(arr, m + 1, r);\n    merge(arr, l, m, r);\n  }\n  mergeSort(unsortedarray, 0, unsortedarray.length - 1);\n  return { animation, color_animation };\n};\n","import React, { Component } from \"react\";\nimport \"./Styling_files/CreateElements.css\";\nimport Additional from \"./Additional\";\nimport Axios from \"axios\";\nimport {\n  Bubblesort,\n  Insertionsort,\n  quickSortAlgo,\n  SelectionSort,\n  CombSort,\n  GnomeSort,\n  HeapSort,\n  MergeSort,\n} from \"./Sortalgo\";\nimport { fcn } from \"./Elements\";\nlet selectedIs = \"red\";\nlet Changestate;\nlet timer = null;\nvar children = [];\nvar avg = [];\nvar top = [];\nvar min = [];\nlet width  = 0;\n\nconst AVG_SPEED_ADDRESS = \"http://localhost:3001/getAvg\";\nconst TOP_SPEED_ADDRESS = \"http://localhost:3001/getTop\";\nconst LEAST_SPEED_ADDRESS = \"http://localhost:3001/getLeast\";\nclass CreateElements extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      speed: 60,\n      color: \"rgb(65, 183, 250)\",\n      IsPlaying: false,\n      time: \"00:00\",\n      Analysistool: false,\n      Algo_Name: \"None\",\n      Total_Array: \"NA\",\n      Array_Per_Sec: \"NA\",\n      status: \"Not Started Yet.\",\n      advance: false,\n    };\n    this.getChildBtn = React.createRef();\n  }\n\n  SortAlgo = (sort) => {\n    let date1 = new Date();\n    const sorted_arrs = sort.animation;\n    const color = sort.color_animation;\n\n    // Will hold a reference to the timer\n    let index = 0;\n\n    const animate = () => {\n      fcn(sorted_arrs[index], color[index]);\n      if (index === sorted_arrs.length - 1) {\n        clearInterval(timer); // Cancel the timer\n        alert(\"Sorting Complete\");\n        this.stopOrResumeAllBtn(false);\n        let date2 = new Date();\n        this.setState({\n          time: (date2 - date1) / 1000,\n          IsPalying: false,\n          status: \"Completed/Success\",\n          Total_Array: sorted_arrs.length,\n          Array_Per_Sec: (1 / sorted_arrs.length).toFixed(6),\n        });\n      } else {\n        index++;\n      }\n    };\n    timer = setInterval(animate, this.state.speed);\n  };\n\n  SubmitValue = (name, speed) => {\n    Axios.post(\"http://localhost:3001/insert\", {\n      SortName: name,\n      Speed: speed,\n      len: this.props.array.length,\n    }).then(() => {\n      alert(\"Success\");\n    });\n  };\n  getData = (Algo) => {\n    this.getFromBackend(Algo, AVG_SPEED_ADDRESS, \"AVG\");\n    this.getFromBackend(Algo, TOP_SPEED_ADDRESS, \"TOP\");\n    this.getFromBackend(Algo, LEAST_SPEED_ADDRESS, \"LEAST\");\n  };\n  getFromBackend = (Algo, address, heading) => {\n    Axios.get(address, {\n      params: {\n        sortname: Algo,\n      },\n    }).then((response) => {\n      this.makeElem(response.data, heading);\n    });\n  };\n  makeElem = (data, heading) => {\n    if (heading === \"AVG\") {\n      avg = data.slice();\n    }\n    if (heading === \"TOP\") {\n      top = data.slice();\n    }\n    if (heading === \"LEAST\") {\n      min = data.slice();\n    }\n  };\n  ChoseWhichSort = (algo_name, e) => {\n    this.stopOrResumeAllBtn(true);\n    let Start = new Date();\n    let sort;\n    let array = this.props.array;\n    switch (algo_name) {\n      case \"Bubble\":\n        sort = Bubblesort(array);\n        break;\n      case \"Insertion\":\n        sort = Insertionsort(array);\n        break;\n      case \"Quick\":\n        sort = quickSortAlgo(array);\n        break;\n      case \"Selection\":\n        sort = SelectionSort(array);\n        break;\n      case \"Comb\":\n        sort = CombSort(array);\n        break;\n      case \"Gnome\":\n        sort = GnomeSort(array);\n        break;\n      case \"Heap\":\n        sort = HeapSort(array);\n        break;\n      case \"Merge\":\n        sort = MergeSort(array);\n        break;\n      default:\n        alert(\"Nothing Here\");\n    }\n\n    this.setState({\n      IsPalying: !this.state.IsPlaying,\n      Algo_Name: algo_name,\n      status: \"Pending\",\n      Total_Array: \"Calculating ...\",\n      Array_Per_Sec: \"Calculating ...\",\n    });\n    this.SortAlgo(sort);\n    let End = new Date();\n    let Correct_speed = (End - Start) / 1000;\n    const length = [50, 100, 500];\n    // if (length.includes(this.props.array.length)) {\n    //   this.SubmitValue(algo_name, Correct_speed); \n    // }\n    // this.getData(algo_name);\n  };\n  stopOrResumeAllBtn = (Bool) => {\n    let parent = this.getChildBtn.current;\n    children = [...parent.children];\n    for (let child of children) {\n      child.disabled = Bool;\n    }\n  };\n\n  StopPlayingAlgorithm = () => {\n    alert(\"Algorithm Stopped\");\n    this.setState({\n      IsPalying: false,\n      status: \"Aborted / Failed\",\n      Total_Array: \"NA\",\n      Array_Per_Sec: \"NA\",\n      time:'00:00'\n\n    });\n    //fcn([],[])\n    clearInterval(timer);\n    this.stopOrResumeAllBtn(false);\n  };\n  SetSpeed = (e) => {\n    this.setState({ speed: e.target.value });\n  };\n  advance = () => {\n    this.setState({ advance: !this.state.advance });\n  };\n  getwidth = ()=>{\n    width = Math.floor( document.body.clientWidth / (this.props.n *2)); //Math.floor(100+temp)/(this.props.n); \n  }\n  render() {\n    Changestate = (stat, value) => {\n      if (stat === \"Color\") {\n        this.setState({ color: value });\n      }\n      if (stat === \"Ana\") {\n        if (this.state.IsPlaying) {\n          alert(\"Cannot Show ,Algorithm Running!\");\n        } else {\n          this.setState({ Analysistool: !this.state.Analysistool });\n        }\n      }\n    };\n    return (\n      <div>\n        <div className=\"Option-Container\">\n          <div id=\"Heading\">\n            Algorithms\n            <div ref={this.getChildBtn} id=\"Algo-Parent\">\n              <button onClick={(e) => this.ChoseWhichSort(\"Bubble\", e)}>\n                Bubble\n              </button>\n              <button onClick={(e) => this.ChoseWhichSort(\"Insertion\", e)}>\n                Insertion\n              </button>\n              <button onClick={(e) => this.ChoseWhichSort(\"Quick\", e)}>\n                Quick\n              </button>\n              <button onClick={(e) => this.ChoseWhichSort(\"Selection\", e)}>\n                Selection\n              </button>\n              <button onClick={(e) => this.ChoseWhichSort(\"Merge\", e)}>\n                Merge\n              </button>\n              <button onClick={(e) => this.ChoseWhichSort(\"Heap\", e)}>\n                HeapSort\n              </button>\n              <button onClick={(e) => this.ChoseWhichSort(\"Comb\", e)}>\n                CombSort\n              </button>\n              <button onClick={(e) => this.ChoseWhichSort(\"Gnome\", e)}>\n                GnomeSort\n              </button>\n            </div>\n          </div>\n\n          {this.state.IsPalying ? (\n            <button onClick={this.StopPlayingAlgorithm}>Stop</button>\n          ) : null}\n\n          <Additional color={this.state.color} algo_running={this.state} />\n          <div id=\"RightLayout\">\n            <div className=\"TimerDisplay\">\n              Sorted In : {this.state.time}\n              Seconds\n            </div>\n            <div id=\"speed-block\">\n              Speed\n              <select onChange={this.SetSpeed}>\n                <option value={100}>Medium</option>\n                <option value={200}>Slow</option>\n                <option value={20}>Fast</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <div id=\"as\">\n          <div className=\"array-barContainer\">\n           {this.getwidth()}\n            {this.props.array.map((val, index) => {\n              \n              this.props.changable[index] === \"r\" || this.props.changable[index]==='g'\n                ? this.props.changable[index]==='g'? (selectedIs = 'green') : (selectedIs = 'red') \n                : (selectedIs = this.state.color);\n                \n              return (\n                <div\n                  className=\"array-bar\"\n                  key={index} \n                  style={{ height: `${val}px`, backgroundColor: selectedIs, width : `${width}px`  }}\n                >\n                  {\" \"}\n                  {val}\n                </div>\n              );\n            })}\n          </div>\n          <div >\n            {this.state.Analysistool ? (\n              <div className=\"Analysis-Tools\">\n                <div id=\"Title\">\n                  <div> Algorithm Analizer</div>\n                  <button\n                    onClick={() => {\n                      Changestate(\"Ana\", false);\n                    }}\n                  >\n                    close\n                  </button>\n                </div>\n                <div id=\"Body\">\n                  <header>Algorithm Name : {this.state.Algo_Name} </header>\n                  <div id=\"Insidesec\">\n                    <section>\n                      Array Traversal/Array Frames : {this.state.Total_Array}\n                    </section>\n                    <section>Status : {this.state.status}</section>\n                    <section>\n                      {\" \"}\n                      Loop Computational Speed : {this.state.Array_Per_Sec}{\" \"}\n                    </section>\n                    <section>Sorted in : {this.state.time}</section>\n                    <section>\n                      <button onClick={this.advance}>Advance</button>\n                      {this.state.advance ? (\n                        <div>\n                          <div id=\"table\">\n                            <div className=\"r\">\n                              <div>n Element</div>\n                              <div>50 Elements</div>\n                              <div>100 Elements</div>\n                              <div>500 Elements</div>\n                            </div>\n                            <div className=\"r\">\n                              <div> Average</div>\n                              {avg.map((val, key) => {\n                                return (\n                                  <div key={key}>{val.average.toFixed(6)}</div>\n                                );\n                              })}\n                            </div>\n\n                            <div className=\"r\">\n                              <div> Least Speed</div>\n                              {top.map((val, key) => {\n                                return (\n                                  <div key={key}>{val.max.toFixed(6)}</div>\n                                );\n                              })}\n                            </div>\n\n                            <div className=\"r\">\n                              <div> Top Speed</div>\n                              {min.map((val, key) => {\n                                return (\n                                  <div key={key}>{val.min.toFixed(6)}</div>\n                                );\n                              })}\n                            </div>\n                          </div>\n                        </div>\n                      ) : null}\n                    </section>\n                  </div>\n                </div>\n              </div>\n              \n            ) : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { CreateElements, Changestate };\n","import React, { Component } from \"react\";\nimport { CreateElements } from \"./CreateElements\";\nimport \"./Styling_files/Element.css\";\nlet fcn, rdm;\nclass Elements extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n    this.number = React.createRef();\n    this.HandelesNoOfElem = this.HandelesNoOfElem.bind(this);\n    this.getvalues = this.getvalues.bind(this);\n    this.storevalue = this.storevalue.bind(this);\n    this.generaterandom = this.generaterandom.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ array: [] });\n  }\n  state = {\n    start: true,\n    array: [],\n    num: 0,\n    startsort: false,\n    changable: [],\n  };\n  HandelesNoOfElem = () => {\n    let n = parseInt(this.myRef.current.value);\n    this.myRef.current.value = \"\";\n    if (isNaN(n)) {\n      alert(\"Enter A Number \");\n    } else {\n      this.setState({ start: !this.state.start, num: n });\n    }\n  };\n  getvalues = () => {\n    let newelem = parseInt(this.number.current.value);\n    this.number.current.value = \"\";\n    if (isNaN(newelem)) {\n      alert(\"It Is Not Number Stupid!\");\n    } else {\n      this.state.array.length < this.state.num - 1\n        ? this.storevalue(newelem)\n        : this.setState({ startsort: true });\n    }\n  };\n\n  storevalue = (newelem) => {\n    this.setState((prevState) => ({\n      array: [...prevState.array, newelem],\n    }));\n  };\n\n  generaterandom = () => {\n    this.setState({ array: [] });\n    let min = 30,\n      max = 750;\n    for (let i = 0; i < this.state.num; i++) {\n      this.storevalue(Math.floor(Math.random() * (max - min) + min));\n    }\n    this.setState({ startsort: true });\n  };\n\n  changeState = (val1, val2) => {\n    this.setState({ array: val1, changable: val2 });\n  };\n  HandlesKey = (e) => {\n    if (e.key === \"Enter\") {\n      this.HandelesNoOfElem();\n    }\n  };\n\n  HandlesKeyElem = (e) => {\n    if (e.key === \"Enter\") {\n      this.getvalues();\n    }\n  };\n\n  render() {\n    // this is done because to bundel the function in a variable and export it in next file\n    fcn = this.changeState;\n    rdm = this.generaterandom;\n    return (\n      <div>\n        {this.state.startsort ? (\n          <CreateElements\n            array={this.state.array}\n            changable={this.state.changable}\n            n = {this.state.num}\n          />\n        ) : (\n          <div>\n            {this.state.start ? (\n              <div>\n                <label>Enter Number Of Elements</label>\n                <input\n                  type=\"Number\"\n                  ref={this.myRef}\n                  onKeyDown={this.HandlesKey}\n                />\n                <button onClick={this.HandelesNoOfElem}>Ok</button>\n              </div>\n            ) : (\n              <div>\n                <div>\n                  Enter {this.state.num} Elements value\n                  <input\n                    type=\"number\"\n                    ref={this.number}\n                    onKeyDown={this.HandlesKeyElem}\n                  ></input>\n                  <button onClick={() => this.getvalues()}>Done</button>\n                </div>\n                <div className=\"array-box-parent\">\n                  {this.state.array.map((value, index) => {\n                    return (\n                      <div key={index} className=\"array-box\">\n                        {value}\n                      </div>\n                    );\n                  })}\n                </div>\n                <div>\n                  or\n                  <button onClick={this.generaterandom}>\n                    Generate Random {this.state.num} values\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n// making a 2 elements as single object\n// Elements - is the jsx class\n//fcn is the Function to change the state of the class\nexport { Elements, fcn, rdm };\n","import React from \"react\";\nimport \"./Styling_files/Sortapp.css\";\nimport { Elements } from \"./Elements\";\n\nfunction Sortapp() {\n  return (\n    <div>\n      <header>Sort App Visualizer</header>\n      <Elements />\n    </div>\n  );\n}\n\nexport default Sortapp;\n","import React from 'react';\nimport Sortapp from './files/Sortapp';\nimport './App.css'\n\nfunction App() {\n  return(\n   <Sortapp/>\n  )\n}\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}